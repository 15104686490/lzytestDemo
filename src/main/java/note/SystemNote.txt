操作系统
进程：分配资源的基本单位  程序执行的基本单位
早期为单任务模型 即作业
早期各个进程采用分时的技术交替执行 通过管道等技术进行各个进程间的通信
进行cpu资源的分配  出现了线程 即轻量级的进程
被操作系统直接调度的线程叫做内核级线程
主线程通过程序的方式实现了子线程 即用户级线程

用户态线程 在用户空间创建
优点 切换成本低 管理开销小
缺点 与内核沟通的成本大 进行io操作需要进行用户态和内核态的切换
    线程间的协作比较麻烦  操作系统无法针对线程的调度进行优化

内核态线程
优点 操作系统级优化 io操作不需要进行系统调用可直接执行
    充分利用多核优势 可在多个cpu核心执行内核线程
缺点 创建成本高 需要切换为内核态  切换成本高 切换时需要进行内核操作
     扩展性差 数量有限
用户级和内核级线程多对多 linux

cpu寄存器

程序计数器
记录执行指令的位置

进程的上下文
用户态和内核态
上下文包含内存 栈  用户空间资源 内核对战 寄存器等内核空间的状态

中断执行方式
中断识别码 不同的执行位置

按时间片进行进程的调度

进程状态
就绪状态 进程创建好后 进入队列
运行状态 开始执行
时间片用完后回到就绪状态
如果出现了等待其他线程完成则进入阻塞状态
创建状态 分配资源并初始化等工作
终止状态 回收资源

内存中
进程表
记录内存位置 pid 状态  分配空间 属于哪个用户
线程表

协程
在线程的基础上进行分时复用 切换发生在用户态 不存在用户态到内核态的切换 代价也就更低
与异步io相结合
计算密集型的任务不建议使用协程 原因是计算密集型的任务需要大量的线程切换涉及的资源较多
