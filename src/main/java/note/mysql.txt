InnoDb存储引擎
后台线程
master thread
核心后台线程 负责将缓冲池中的数据异步刷新到磁盘  保证一致性
内部存在多个循环
主循环 后台循环 刷新循环 暂停循环
iO thread
AIO async io 处理IO请求 io thread负责这些io请求的回调 write read insertbuffer log
purge thread
事务提交后 undolog不在被需要  因此使用 该线程来对已经使用并分配的undo页进行回收
page cleaner thread
负责脏页刷新工作

内存
缓冲池
缓解CPU速度与磁盘速度之间的差别 通过内存速度缓解磁盘速度对性能的影响
数据库页的修改操作  首先修改缓冲池中的页 而后按照一定的频率刷新到磁盘  通过checkpoint 机制刷新回磁盘
缓冲池中的页类型： 索引页  数据页  undo页 插入缓存  自适应哈希索引 锁信息 数据字典信息
缓存管理机制 通常是lru 即使用频繁的在列表的前端  使用较少的页在列表的尾端  空间不足时首先释放列表尾部的页
缓冲池的默认的页大小默认为16kb
innodb中 lru优化  增加midpoint 即最新访问的页放在该处 避免类似扫描操作使数据被刷出 原因是这种操作会访问较多的页 甚至全部的页
而通常这些并不全部都是热点数据
重做日志缓冲
额外内存池
该引擎中对内存的管理通过一种堆内存的方式进行

check point
目的
1.缩短数据库的恢复时间
2.缓冲池空间不足时  将脏页刷新到磁盘
3.重做日志不可用时 刷新脏页
分为两种
sharp checkpoint
发生在数据库关闭时  将所有的脏页都刷新回磁盘
fuzzy checkpoint
只刷新一部分脏页

关键特性
插入缓存
两次写
自适应哈希索引
异步IO
刷新邻接页

insert Buffer
非聚集索引的更新  并不是每次都直接插入到索引页中 而是先判断插入的非聚集索引是否在缓冲池中 在则直接插入  若不在
则先放到insert buffer对象 后续再以一定的频率进行insertBuffer和非聚集索引的合并操作
条件  1. 索引时辅助索引 2.索引不是唯一的

change buffer
对dml操作 insert delete update 进行缓冲
分为个过程
1.标记为已删除 2.真正将记录删除

double write
数据页可靠性
使用重做日志前 需要一个副本页  发生写入失效时  先通过该副本来进行还原 而后在进行重做 即double write
内存中的double write buffer 以及  磁盘中的

自适应哈希索引
观察个索引的查询情况 而后通过建立该索引提升速度  根据访问的频率和模式

异步IO
使用异步IO来处理磁盘操作
IO merge

刷新临近页
杀心脏页时 会检测所在区所有的页 如果有脏页则一起刷新

文件
参数文件
mysql数据库的参数文件是以文本方式进行存储
参数  可以看做一个键值对  通过show variables命令查看数据库中的所有参数
参数分为两种
动态参数和静态参数
动态，即可以在运行过程中进行修改  通过set进行修改  global和session
静态，在整个实例的生命周期内都不得进行修改  类似只读

日志文件
记录影响mysql数据库的各类活动
包含：
错误日志  记录启动  运行  关闭过程  show variables like log_error来定位该文件
二进制日志
慢查询日志  定位存在问题的sql的语句
查询日志  记录了对mysql数据库的请求信息 默认文件名称：主机名.log

表
每个表都有个主键 若创建表时没有显示指定主键
innodb会按照以下原则选择主键：
1.判断表中是否存在非空的唯一索引 按照创建索引的顺序选择
2.自动创建一个6字节大小的指针

逻辑存储结构
所有数据被逻辑的放在一个空间中 即表空间
表空间由端 区 页组成 页在一些文档中也称为块
默认一个页的大小为16kb
常见的页类型
数据页
undo页
系统页
事务数据页
插入缓冲位图页
插入缓冲空闲列表页
未压缩的二进制大对象页
压缩的而兼职大对象页

行
一页大概存储16kb/2-200行 约7992行
分为compact和redundant两种
compact格式
格式
变长字段长度列表
null标志位
记录头信息
列1数据
列2数据
varchar长度限制65535

redundant是5.0前的格式
字段长度偏移列表 记录头信息 列1数据 列2数据 列3数据
compressed和dynamic行记录格式
1.0.x引入的新的格式

数据页结构
btree node
数据页的组成
file header 文件头
page header 页头
infimun superemum record
user record用户记录 行记录
free space空闲空间
page directory页目录
file trailer文件结尾信息
约束机制
外键约束
创建约束
建立表时就进行约束的定义
利用alter table命令来进行创建约束
保证数据的完整性
对错误数据的约束
外键约束

分区表
将一个表或索引分解为更小的部分

索引
索引的添加应该在建表前有所思考  索引较少影响查询效率
索引过多可能会对性能产生影响
Innodb支持的诱因主要以下常见的几种：
B+树索引
B带边平衡的意思
平衡查找树 所记录的节点都是按照键值的大小顺序存放在同一层的子节点上
B+索引的特点是高扇出性 因此树的高度一般都在2-4层 以此保障查找某一个值时 只需要2-4次的操作
B+索引分为聚集索引 clustered index 和 辅助索引sceondary index
每个数据页都通过双向链表来进行连接
定义：按照表的主键构造的一棵B+树 叶子节点存放的即为整张表的记录数据  叶子节点也称为数据页
并不是物理上连续  而是逻辑上连续的
对主键的排序查找和范围查找速度快

通过观察高选择性来选择是否添加索引 show index cardinality

联合索引 指的是 对表上多个列进行索引
覆盖索引 指的是 从辅助索引中即可查询到记录 不需要到聚集索引中进行查询
优化器选择不适用索引的情况
多发生在范围查询  join连接的情况
可以使用force index来强制使用索引

支持索引提示 index hint
显式的告诉优化器使用哪个索引
两种情况
选择的索引错误 较为少见  另一种是 索引的数量非常多 计划时间需要耗时较长 即分析需要较长的耗时

哈希算法 O(1)
解决地址冲突的方法  链地址法
范围查询无法使用自适应哈希索引

全文检索
包含内容的数据
倒排索引
在辅助表中存储了单词和与单词自身在一个或多个文档中所在位置的映射  利用辅助表实现 存于磁盘中
利于更好的定位数据
全文检索索引缓存 FTS index cache 红黑树结构

辅助索引 也叫非聚集索引
叶子节点并不包含记录的全部数据 包含键值 还包含一个书签 bookmark 通过其得知在哪里可以找到与索引相应的行数据
找到查询数据所在行的页  然后数据库把页读入内存 在内存中进行查找 最后得到数据
二叉查找树
每个节点都有各自的键值 左子树的键值小于根节点键值 右子树的键值总是大于根的键值
平衡树 avl树
保持平衡性的代价较大
每个节点
全文索引
哈希索引
自适应索引 即引擎会根据表的使用情况生成哈希索引 而不是人为生成


锁
innodb会在行级别上对表数据上锁
lock和latch
lock
行锁
表锁
意向锁 将锁对象分为更多层次
意向共享锁 想要获取表中的几行的共享锁
意向排它锁 想要获取表中的几行的排它锁

一致性非锁定读 指的是innodb存储引擎通过行多版本控制的方式来读取当前执行时间数据库中行的数据
若读取行在进行删除或更新操作 那么不会等待  而是读取数据快照
快照数据通过undo段来完成
多版本并发控制 mvcc

一致性锁定读
for update
lock  in share mode

锁的算法
行锁
record lock 单个记录上的锁
gap lock 间隙锁 锁住范围而不是记录本身
next-key lock 前两者结合
查询的索引含有唯一属性时  会对next-key lock进行优化 降级为record lock即仅锁住 索引本身

幻象问题
指的是同一事务下 连续执行两次同样的sql语句可能导致不同的结果 第二次的查询结果会返回之前不存在的行

脏读
此处脏数据指的是未提交的数据

不可重复读
指的是一个事务内多次读取同一数据集合 读到的数据不同 称为不可重复读
通过next key lock实现

更新丢失
一个事务的更新操作会被另一个事务的更新操作所覆盖
串行化 解决

阻塞
不同锁之间的兼容性关系 会出现一个事务中的锁需要等待另一个事务中锁释放其占用的资源的情况 即阻塞
可通过参数控制等待的时间 超时可选择回滚 或抛出错误 1205

死锁
指的是两个或以上的事务在执行的过程中 因为争夺锁资源而造成的一种互相等待的问题
wait for graph 进行死锁的检测
需要保存两种信息 ： 锁的信息链表 事务等待的链表
可选择回滚事务量最小的事务
1213错误

锁升级
指的是将当前的锁粒度降低
innodb不存在锁升级  使用位图来管理锁


共享锁 允许读行数据
排它锁 允许删除或修改行数据
支持多粒度锁定

latch
读写锁
互斥锁

事务
事务的主要目的：把数据库从一种一致状态转换为另一种一致状态 在数据库提交工作时 可以确保要么所有修改都已经保存了
要么所有修改都不保存

ACID特性
原子性
指的是整个数据库事务操作是不可分割的 操作要么都做 要么都不做
一致性
指的是数据库从一种一致性状态转变为下一种一致性状态
隔离性
指的是每个读写事务对象对其他的事务的操作对象能够相互分离 即提交前是不可见的
持久性
事务一旦提交结果就是永久性的 即使出现问题也可以通过一些措施进行数据恢复

事务的分类
扁平事务

带有保存点的扁平事务
除了支持扁平事务操作 允许事务执行过程中回滚到同一事务中较早的一个状态
保存点 记住事务当前的状态

链事务
保存点模式的一种变种
回到最近的一个保存点
嵌套事务
层次结构 由一个顶层事务控制各个次层事务 即子事务
分布式事务
分布式环境运行的扁平事务

事务的实现
redo log 和 undo log来实现
redo log重做日志 恢复提交事务修改的页操作 物理日志
用来保证事务的原子性和持久性
事务提交时 必须先将事务的所有日志写入到重做日志文件进行持久化才算完成
fsync 将重做日志缓冲写入到重做日志文件
log block
重做日志以512字节进行存储的 以块的方式进行保存 重做日志块
log group
重做日志组
多个日志文件组成
重做日志格式

lSN日志序列号

恢复

undo log用来保证事务的一致性 回滚记录到某个特定的版本  MVCC 逻辑日志
将数据库逻辑恢复到原来的样子

pruge
delete 和 update可能并不直接删除原有的数据
delete flag设置为1 但没有直接删除 还是存在在B+树当中
这个指令用于完成最终的删除操作  类似一种延时性的操作
若不被其他事务引用

group commit

事务控制语句
默认为自动提交

qps请求数  tps事务处理能力

事务隔离级别
read uncommitted
read commited
repeatable read
serializable

分布式事务
XA事务
允许多个独立的事务资源参与到一个全局的事务中
由一个或多个资源管理器  一个事务管理器  以及一个应用程序组成
使用两段式提交
第一阶段所有参与全局事务的节点开始准备 并告知事务管理器准备好提交了
第二阶段事务管理器告诉资源管理器执行rollback还是commit

内部XA事务
存储引擎和插件之间 或引擎与引擎之间

不好的事务习惯

长事务
执行时间较长的事务
有时可以通过转化为小批量事务来处理

备份和恢复
hot backup热备
运行中直接备份 且对正运行的数据库操作没有任何影响
cold backup冷备
停止情况下进行备份 相对简单  复制相关的数据库物理文件即可
warm backup温备
运行中执行 但会对当前的数据库操作产生影响

从备份内容分 分为
逻辑备份
可读的 文本 如一条条sql 或实际数据组成

裸文件备份
复制数据库物理文件

从备份数据库内容来分 备份分为
完全备份

增量备份
日志备份

复制
主服务器把数据更改记录到二进制日志中
从服务器把主服务器的二进制日志复制到自己的中继日志中
从服务器重做中继日志中的日志 把更改应用到自己的数据库上 以达到数据的最终一致性








